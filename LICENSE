import speech_recognition as sr
import time
from datetime import datetime
import RPi.GPIO as GPIO  # For Raspberry Pi hardware control (if using a Pi)

# Hardware setup (assuming Raspberry Pi or similar microcontroller)
HEATING_PIN = 18  # GPIO pin for controlling the heating element
GPIO.setmode(GPIO.BCM)
GPIO.setup(HEATING_PIN, GPIO.OUT)
GPIO.output(HEATING_PIN, GPIO.LOW)  # Start with heating off

# Initialize speech recognizer
recognizer = sr.Recognizer()
microphone = sr.Microphone()

            utensil.process_command(command)
            utensil.check_timer()
            time.sleep(1)  # Small delay to prevent overwhelming the system
            
    except KeyboardInterrupt:
        print("\nShutting down...")
        GPIO.output(HEATING_PIN, GPIO.LOW)
        GPIO.cleanup()

if __name__ == "__main__":
    main()
# Predefined voice commands
COMMANDS = {
    "turn on": "Turning on the heating element",
    "turn off": "Turning off the heating element",
    "set timer": "Please specify the time in minutes",
    "status": "Checking status"
}

class VoiceCookingUtensil:
    def __init__(self):
        self.is_heating = False
        self.timer_end = None
        
    def listen_for_command(self):
        print("Listening for voice command...")
        with microphone as source:
            recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = recognizer.listen(source)
        
        try:
            command = recognizer.recognize_google(audio).lower()
            print(f"You said: {command}")
            return command
        except sr.UnknownValueError:
            print("Sorry, I couldn't understand that.")
return None
        except sr.RequestError:
            print("Sorry, there was an error with the speech recognition service.")
            return None

    def process_command(self, command):
        if not command:
            return
        
        if "turn on" in command:
            self.turn_on()
        elif "turn off" in command:
            self.turn_off()
        elif "set timer" in command:
            self.set_timer(command)
        elif "status" in command:
            self.check_status()
        else:
            print("Command not recognized. Available commands: turn on, turn off, set timer, status")

    def turn_on(self):
        if not self.is_heating:
            GPIO.output(HEATING_PIN, GPIO.HIGH)
            self.is_heating = True
            print(COMMANDS["turn on"])
        else:
            print("Heating element is already on")

    def turn_off(self):
        if self.is_heating:
            GPIO.output(HEATING_PIN, GPIO.LOW)
            self.is_heating = False
            self.timer_end = None
            print(COMMANDS["turn off"])
        else:
            print("Heating element is already off")

    def set_timer(self, command):
        try:
# Extract number of minutes from command (e.g., "set timer for 5 minutes")
            words = command.split()
            minutes = int(next((w for w in words if w.isdigit()), 0))
            if minutes > 0:
                self.timer_end = datetime.now().timestamp() + (minutes * 60)
                if not self.is_heating:
                    self.turn_on()
                print(f"Timer set for {minutes} minutes")
            else:
                print("Please specify a valid number of minutes")
        except ValueError:
            print("Invalid timer value")

    def check_status(self):
        if self.is_heating:
            print("Heating element is ON")
            if self.timer_end:
                remaining = (self.timer_end - datetime.now().timestamp()) / 60
                print(f"Timer remaining: {remaining:.1f} minutes")
        else:
            print("Heating element is OFF")

    def check_timer(self):
        if self.timer_end and datetime.now().timestamp() >= self.timer_end:
            self.turn_off() h 
print("Timer finished - heating element turned off")
            self.timer_end = None

def main():
    utensil = VoiceCookingUtensil()
    print("Voice-Regulated Cooking Utensil ready. Say a command!")
    
    try:
        while True:
            command = utensil.listen_for_command()
            utensil.process_command(command)
            utensil.check_timer()
            time.sleep(1)  # Small delay to prevent overwhelming the system
            
    except KeyboardInterrupt:
        print("\nShutting down...")
        GPIO.output(HEATING_PIN, GPIO.LOW)
        GPIO.cleanup()

if __name__ == "__main__":
    main()
